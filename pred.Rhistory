featurePlot(x=training[,c(1,2,5)],y= training$CompressiveStrength,plot="pairs")
View(training)
str(traing)
str(training)
hist(training$SuperPlasticizer)
training$SuperPlasticizer)
training$SuperPlasticizer
training$Superplasticizer
hist(training$Superplasticizer)
mean(training$Superplasticizer)
sd(training$Superplasticizer)
hist((training$Superplasticizer-mean(training$Superplasticizer))/st(training$Superplasticizer))
hist((training$Superplasticizer-mean(training$Superplasticizer))/sd(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
interest <- grep("^IL",names(training),ignore.case=TRUE,value=TRUE)
interest
View(training)
cor = abs(cor(training[,-1])
diag(cor)<- 0
which(cor>.8,arr.ind=T)
cor = abs(cor(training[,-1]))
diag(cor)<- 0
which(cor>.8,arr.ind=T)
cor = abs(cor(training[,-1]))
cor(training[,-1])
cor = abs(cor(training))
training
cor = abs(cor(training[,c(2:ncol(training))))
cor = abs(cor(training[,c(2:ncol(training))]))
cor = abs(cor(training[,c(2:5]))
corl = abs(cor(training)
)
cor(training)
str(training)
cor(training[,c(2,3,4)])
corl = cor(training[,names(training) %in% interest])
corl
corl = abs(cor(training[,names(training) %in% interest]))
diag(corl)<- 0
which(corl>.8,arr.ind=T)
corl
which(corl>.6,arr.ind=T)
which(corl>.7,arr.ind=T)
plot(training[,6],training[,3])
plot(training[,3],training[,3])
plot(training[,3],training[,6])
names(training)[c(3,6)]
plot(training$IL_3,training$IL_16)
View(training)
intData <- training[,names(training) %in% interest])
intData <- training[,names(training) %in% interest]
View(intData)
pca <- prcomp(intData)
pac
pca
names(pca)
pca$sdev
pca <- prcomp(intData,scale=TRUE)
pca$sdev
pca$dev ^2
pca$dev * pca$dev
pca$sdev ^2
pca <- prcomp(intData,scale=TRUE,center = TRUE)
pca$sdev ^2
View(training)
prep <- preProcess(training[,-1],method=c("center","scale","pca"),pcaComp=ncol(inData))
prep <- preProcess(training[,c(2,ncol(training))],method=c("center","scale","pca"),pcaComp=ncol(inData))
prep <- preProcess(training[,c(2,ncol(training))],method="pca",pcaComp=ncol(inData))
prep <- training[,c(2,ncol(training))]
prep
View(intData)
prep <- preProcess(inData,method=c("center","scale","pca"),pcaComp=ncol(inData))
intData <- training[,names(training) %in% interest]
prep <- preProcess(intData,method=c("center","scale","pca"),pcaComp=ncol(inData))
prep <- preProcess(intData,method=c("center","scale","pca"),pcaComp=ncol(intData))
prep$std
names(prep)
prep$pcaComp
prep
sd(intData)
sd(intData[,-1])
intData[,-1]
sd(intData[,2])
sd(intData[,3])
plot(pca)
plot(pca,ylim = 9)
plot(pca,ylim = c(0:9))
plot(pca,ylim = c(9,0))
plot(pca,ylim = c(0,9))
plot(pca,ylim = c(0,5))
prep <- preProcess(intData,method=c("center","scale","pca"),pcaComp=7)
View(intData)
str(interest)
interest[13]=diagnosis
interest[13]="diagnosis"
str(interest)
intData <- training[,names(training) %in% interest]
pca <- prcomp(intData[,-13],scale=TRUE,center = TRUE)
pca <- prcomp(intData[,c(1:12)],scale=TRUE,center = TRUE)
View(intData)
pca <- prcomp(intData[,-1],scale=TRUE,center = TRUE)
plot(pca,ylim = c(0,5))
prep <- preProcess(intData[,-1],method=c("center","scale","pca"),pcaComp=7)
modelfit <- train(intData$diagnosis ~.,method="glm",data=intData)
modelfitPC <- predict(prep,intData[,-1])
testingIL <- testing[,names(testing) %in% interest]
testPC <- predict(prep,testingIL)
View(testingIL)
testPC <- predict(prep,testingIL[,-1])
confusionMatrix(testingIL$diagnosis,predict(modelfit,testPC))
View(testPC)
confusionMatrix(testingIL$diagnosis,predict(modelfitPC,testPC))
confusionMatrix(testingIL$diagnosis,predict(modelfit,testPC))
trainPC <- predict(prep,intData[,-1])
modelfitPC <- train(intData$diagnosis~.,trainPC)
confusionMatrix(testingIL$diagnosis,predict(modelfitPC,testPC))
confusionMatrix(testingIL$diagnosis,predict(modelfit,testingIL))
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(caret)
set.seed(3433)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
View(segmentationOriginal)
library(caret)
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
inTrain = createDataPartion(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
#
library(AppliedPredictiveModeling)
data(segmentationOriginal)
inTrain = createDataPartition(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
#
library(caret)
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
inTrain = createDataPartition(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
View(training)
cartFit = train(Case ~., method="rpart",data="training")
cartFit = train(Case ~ . , method="rpart",data="training")
cartFit = train(Case ~ . , method="rpart",data=training)
library(rattle)
install.packages("rattle")
library(rattle)
install.packages(c("arules", "arulesViz", "bibtex", "boot", "car", "caTools", "class", "cluster", "codetools", "devtools", "digest", "dplyr", "earth", "foreign", "Formula", "gender", "gsubfn", "highr", "Hmisc", "HTMLUtils", "httpuv", "httr", "jsonlite", "KernSmooth", "knitcitations", "knitr", "labeling", "lazyeval", "magrittr", "manipulate", "maps", "MASS", "Matrix", "maxLik", "mgcv", "mime", "nlme", "plotmo", "plotrix", "qdapRegex", "quantmod", "quantreg", "R2HTML", "R6", "RColorBrewer", "Rcpp", "RCurl", "RefManageR", "reports", "reshape2", "rjson", "rmarkdown", "RMySQL", "ROAuth", "RSQLite", "seriation", "shiny", "SparseM", "sqldf", "stringdist", "stringi", "testthat", "xlsxjars", "xtable"))
install.packages(c("arules", "arulesViz", "bibtex", "boot", "car",
)
install.packages(c("arules", "arulesViz", "bibtex", "boot", "car", "caTools", "class", "cluster", "codetools", "devtools", "digest", "dplyr", "earth", "foreign", "Formula", "gender", "gsubfn", "highr", "Hmisc", "HTMLUtils", "httpuv", "httr", "jsonlite", "KernSmooth", "knitcitations", "knitr", "labeling", "lazyeval", "magrittr", "manipulate", "maps", "MASS", "Matrix", "maxLik", "mgcv", "mime", "nlme", "plotmo", "plotrix", "qdapRegex", "quantmod", "quantreg", "R2HTML", "R6", "RColorBrewer", "Rcpp", "RCurl", "RefManageR", "reports", "reshape2", "rjson", "rmarkdown", "RMySQL", "ROAuth", "RSQLite", "seriation", "shiny", "SparseM", "sqldf", "stringdist", "stringi", "testthat", "xlsxjars", "xtable"))
library(caret)
set.seed(125)
library(AppliedPredictiveModeling)
library(rattle)
data(segmentationOriginal)
inTrain = createDataPartition(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
cartFit = train(Case ~ . , method="rpart",data=training)
print(cartFit$final$finalModel)
fancyRpart(cartFit$finalModel)
cartFit
print(cartFit$finalModel)
fancyRpartPlot(cartFit$finalModel)
library(rattle)
fancyRpartPlot(cartFit$finalModel)
plot(cartFit$finalModel,uniform=TRUE,main= "CART: Tree")
text(cartFit$finalmodel,use.n=TRUE,all=TRUE,cex=.8)
plot(cartFit$finalModel,uniform=TRUE,main= "CART: Tree")
text(cartFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
plot(cartFit$finalModel,uniform=TRUE,main= "CART: Tree")
text(cartFit$finalModel,use.n=TRUE,all=TRUE,cex=.4)
fancyRpartPlot(cartFit$finalModel)
plot(cartFit$finalModel,uniform=TRUE,main= "CART: Tree")
text(cartFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
fancyRpartPlot(cartFit$finalModel)
library(rpart)
fancyRpartPlot(cartFit$finalModel)
library(caret)
set.seed(125)
library(AppliedPredictiveModeling)
library(rattle)
library(rpart)
inTrain = createDataPartition(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
cartFit = train(Case ~ . , method="rpart",data=training)
set.seed(125)
library(AppliedPredictiveModeling)
library(rattle)
library(rpart)
data(segmentationOriginal)
inTrain = createDataPartition(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
cartFit = train(Case ~ . , method="rpart",data=training)
fancyRpartPlot(cartFit$finalModel)
print(cartFit$finalModel)
plot(cartFit$finalModel,uniform=TRUE,main= "CART: Tree")
text(cartFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
pred = predict(cartFit,newdata = test)
print(pred)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
oliveFit=train(Area ~ ., method="rpart",data=olive)
test=  as.data.frame(t(colMeans(olive)))
predict(oliveFit,newdata=test)
View(olive)
View(test)
View(training)
library(AppliedPredictiveModeling)
library(rattle)
library(rpart)
data(segmentationOriginal)
inTrain = createDataPartition(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
cartFit = train(Case ~ . , method="rpart",data=training)
library(caret)
set.seed(125)
library(AppliedPredictiveModeling)
#
data(segmentationOriginal)
inTrain = createDataPartition(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
cartFit = train(Case ~ . , method="rpart",data=training)
print(cartFit$finalModel)
plot(cartFit$finalModel,uniform=TRUE,main= "CART: Tree")
text(cartFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
library(rattle)
library(rpart)
fancyRpartPlot(cartFit$finalModel)
post(cartFit, file = "~/tree.ps",
title = "CART: Tree")
library(caret)
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
inTrain = createDataPartition(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
cartFit = train(Case ~ . , method="rpart",data=training)
print(cartFit$finalModel)
plot(cartFit$finalModel,uniform=TRUE,main= "CART: Tree")
text(cartFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
pred = predict(cartFit,newdata = test)
library(rattle)
library(rpart)
fancyRpartPlot(cartFit$finalModel)
rattle::fancyRpartPlot(cartFit$finalModel)
install.packages("rpart.plot")
library(rattle)
library(rpart)
fancyRpartPlot(cartFit$finalModel)
library(caret)
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
inTrain = createDataPartition(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
cartFit = train(Case ~ . , method="rpart",data=training)
print(cartFit$finalModel)
# plot(cartFit$finalModel,uniform=TRUE,main= "CART: Tree")
# text(cartFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
pred = predict(cartFit,newdata = test)
library(rattle)
library(rpart)
fancyRpartPlot(cartFit$finalModel)
View(training)
library(caret)
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
inTrain = createDataPartition(segmentationOriginal$Case,p=2/3,list=FALSE)
training=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
cartFit = train(Class ~ . , method="rpart",data=training)
print(cartFit$finalModel)
# plot(cartFit$finalModel,uniform=TRUE,main= "CART: Tree")
# text(cartFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
pred = predict(cartFit,newdata = test)
library(rattle)
library(rpart)
fancyRpartPlot(cartFit$finalModel)
install.packages(c("boot", "Cairo", "codetools", "data.table", "foreign", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "qdapTools", "Rchoice"))
install.packages(c("boot", "Cairo", "codetools", "data.table",
))
install.packages(c("boot", "Cairo", "codetools", "data.table", "foreign", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "qdapTools", "Rchoice"))
library(pgmm)
data(olive)
olive = olive[,-1]
oliveFit=train(Area ~ ., method="rpart",data=olive)
test=  as.data.frame(t(colMeans(olive)))
predict(oliveFit,newdata=test)
library(caret)
set.seed(125)
library(pgmm)
data(olive)
olive = olive[,-1]
oliveFit=train(Area ~ ., method="rpart",data=olive)
test=  as.data.frame(t(colMeans(olive)))
predict(oliveFit,newdata=test)
View(olive)
?olive
str(olive)
olive = olive[,-1]
oliveFit=train(factor(Area) ~ ., method="rpart",data=olive)
test=  as.data.frame(t(colMeans(olive)))
predict(oliveFit,newdata=test)
oliveFit=train(as.factor(Area) ~ ., method="rpart",data=olive)
test=  as.data.frame(t(colMeans(olive)))
predict(oliveFit,newdata=test)
oliveFit=train(as.factor(olive$Area) ~ ., method="rpart",data=olive)
test=  as.data.frame(t(colMeans(olive)))
predict(oliveFit,newdata=test)
olive$farea = factor(love$Area)
olive$farea = factor(olive$Area)
olive$farea = as.factor(olive$Area)
olivef = olive[,-1]
olivef$area = factor(olivef$Area)
View(olivef)
olive = olive[,-1]
library(caret)
set.seed(125)
library(pgmm)
data(olive)
olive = olive[,-1]
olivef = olive
olivef$area = factor(olivef$Area)
olivefFit=train(Area ~ ., method="rpart",data=olivef)
library(rattle)
library(rpart)
fancyRpartPlot(olivefFit$finalModel)
print(olivefFit)
print(olivefFit$finalModel)
range(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(13234)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(caret)
library(ElemStatLearn)
data(SAheart)
set.seed(13234)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(caret)
library(ElemStatLearn)
data(SAheart)
set.seed(13234)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(trainSA)
fit = train(chd  ~. ,method="glm",family="binomial",data=trainSA))
fit = train(chd  ~. ,method="glm",family="binomial",data=trainSA)
names(trainSA)
fit = train(chd  ~ age+ obesity +tobacco+alcohol+typea+ldl,method="glm",family="binomial",data=trainSA)
fancyRpartPlot(fitFit$finalModel)
fancyRpartPlot(fit$finalModel)
print(fit$finalModel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
pred <- predict(fit,newdata=testSA)
missClass(testSA,pred)
missClass(trainSA,predTrain)
predTrain <- predict(fit,newdata=trainSA)
missClass(trainSA,predTrain)
library(caret)
set.seed(125)
library(pgmm)
data(olive)
olive = olive[,-1]
olivef = olive
olivef$area = factor(olivef$Area)
olivefFit=train(Area ~ ., method="rpart",data=olivef)
library(rattle)
library(rpart)
fancyRpartPlot(olivefFit$finalModel)
print(olivefFit$finalModel)
test=  as.data.frame(t(colMeans(olivef)))
View(olivef)
test=  as.data.frame(t(colMeans(olivef[,-1])))
olivef[,-1]
head(olivef[,-1])
names(olivef)
test=  as.data.frame(t(colMeans(olivef[,c(2:10)])))
head(olivef[, c(2:10)])
names(olivef[, c(2:10)])
View(olive)
olivefFit=train(area ~ ., method="rpart",data=olivef)
library(rattle)
library(rpart)
fancyRpartPlot(olivefFit$finalModel)
print(olivefFit$finalModel)
library(caret)
set.seed(125)
library(pgmm)
data(olive)
olive = olive[,-1]
olivef = olive
#olivef$area = factor(olivef$Area)
olivefFit=train(factor(olivef$Area) ~ ., method="rpart",data=olivef)
library(rattle)
library(rpart)
fancyRpartPlot(olivefFit$finalModel)
print(olivefFit$finalModel)
test=  as.data.frame(t(colMeans(olivef[,c(2:9)])))
predict(olivefFit,newdata=test)
pred <-predict(olivefFit,newdata=test)
pred
olivef$Area = factor(olivef$Area)
View(olivef)
str(olivef)
olivefFit=train(Area ~ ., method="rpart",data=olivef)
library(rattle)
library(rpart)
fancyRpartPlot(olivefFit$finalModel)
print(olivefFit$finalModel)
test=  as.data.frame(t(colMeans(olivef)))
test[,c(2:9)] =as.data.frame(t(colMeans(olivef[,c(2:9)])))
test[,1]=olivef[,1]
pred <-predict(olivefFit,newdata=test)
pred
View(test)
library(caret)
library(ElemStatLearn)
data(SAheart)
set.seed(13234)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
fit = train(chd  ~ age +alcohol+ obesity +tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
pred <- predict(fit,newdata=testSA)
predTrain <- predict(fit,newdata=trainSA)
print(fit$finalModel)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
missClass(testSA$cld,pred)
missClass(trainSA$cld,predTrain)
library(caret)
library(ElemStatLearn)
data(SAheart)
set.seed(13234)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
fit = train(chd  ~ age +alcohol+ obesity +tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
print(fit$finalModel)
ibrary(caret)
set.seed(125)
library(pgmm)
data(olive)
olive = olive[,-1]
olivef = olive
olivef$Area = factor(olivef$Area)
olivefFit=train(Area ~ ., method="rpart",data=olivef)
olive2fit<0train(factor(olive$Area) ~. ,method="rpart",data=olive)
print(olive2fit$finalModel)
library(caret)
library(rattle)
library(rpart)
set.seed(125)
library(pgmm)
data(olive)
olive = olive[,-1]
olivef = olive
olive2fit <- train(factor(olive$Area) ~. ,method="rpart",data=olive)
print(olive2fit$finalModel)
fancyRpartPlot(olive2fit$finalModel)
test[,c(2:9)] =as.data.frame(t(colMeans(olive[,c(2:9)])))
test =as.data.frame(t(colMeans(olive[,c(2:9)])))
pred2 <-predict(olive2fit,newdata=test)
pred2
olivef$Area = factor(olivef$Area)
olivefFit=train(Area ~ ., method="rpart",data=olivef)
fancyRpartPlot(olivefFit$finalModel)
print(olivefFit$finalModel)
pred <-predict(olivefFit,newdata=test)
pred
View(test)
savehistory("~/pred.Rhistory")
